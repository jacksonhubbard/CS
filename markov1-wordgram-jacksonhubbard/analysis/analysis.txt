Jackson Hubbard - jwh62

Run WordGramDiver for wordgrams of size 2-10 and record
the number of WordGram values/objects that occur more than
once as reported by the runs. For example, with WSIZE = 2,
which generates 2-grams, the output of benchmark and benchmarkShift
each indicates that the total # wordgrams generated is 177,634
and that the # unique wordgrams is 117,181

This means there are 177,634 - 117,181 = 60,453 WordGram values that
occur more than once. Find these same values for other orders
of k and complete the table below for different k-grams/different 
values of WSIZE

WSIZE    # duplicates
2        60,453
3        10,756
4		 1,987
5		 667
6		 362
7		 226
8		 151
9		 105
10		 73

=====
Explain in your own words the conceptual differences between 
the benchmark and benchmarkShift methods. 
Answer these questions: 

(1) Why the results of these methods should be the same in 
terms of changes made to the HashSet parameter.
Both of the methods add the current Wordgram (current for benchmarkShift and
wg from the for loop for benchmark) to the set. They go about doing this two 
different ways, but in the end it achieves the exact same purpose because 
the shift method adds every possible combination to set just like the for loop does. 


(2) What are the conceptual differences between the two
benchmarking methods
Benchmark uses an ArrayList and adds the words one by one. This works because 
you are able to change the size of an ArrayList. Then after adding the words one 
by one, it converts the ArrayList into a String array and then loops through that
to create all of the Wordgrams by changing the start index. Next it adds the new 
Wordgram to the set and returns the length of the set. 

The BenchmarkShift method takes the WSIZE parameter and creates a String array
of that length because this is how many grams we want to create. Thus, it bypasses
the need for an Array List because it uses WSIZE to set the size of the array. 
Then it uses the shiftAdd method we created to shift the current Wordgram by 1
word as it goes through the remaining words left from scanning. It then adds each 
of these to the set and increments the count by 1. 

(3) Is the total amount of memory allocated for arrays
the same or different in the two methods? Account for
arrays created in the methods and arrays created by
WordGram objects. Try to be quantitative in answering.

The benchmark method is going to use up more memory. This is because it involves
an ArrayList, but more importantly for every loop through the for loop, it creates 
a new Wordgram object. BenchmarkShift avoids this by calling the function shiftAdd 
which has a for loop that simply replaces the value one by one. Thus, with all of the 
additional Wordgram objects created benchmark is going to use more storage. How much more 
storage it uses depends on the size of the array of words, but as the number of words increases 
by a factor of C, benchmark must use up about 2C more storage. 








