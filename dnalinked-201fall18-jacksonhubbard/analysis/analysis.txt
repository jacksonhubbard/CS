Jackson Hubbard
jwh62
Lavonne Hoang
lh260


dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	1.309	1290
StringStrand:	            512	      4,965,591	1.447	1290
StringStrand:	          1,024	      5,295,831	1.363	1290
StringStrand:	          2,048	      5,956,311	1.649	1290
StringStrand:	          4,096	      7,277,271	1.985	1290
StringStrand:	          8,192	      9,919,191	2.150	1290
StringStrand:	         16,384	     15,203,031	3.896	1290
StringStrand:	         32,768	     25,770,711	5.746	1290
StringStrand:	         65,536	     46,906,071	9.406	1290
StringStrand:	        131,072	     89,176,791	20.840	1290
StringStrand:	        262,144	    173,718,231	34.049	1290
StringStrand:	        524,288	    342,801,111	69.448	1290


Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:37)
	at DNABenchmark.lambda$0(DNABenchmark.java:76)
	at DNABenchmark$$Lambda$180/6519275.run(Unknown Source)
	at java.base/java.lang.Thread.run(Thread.java:844)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:79)
	at DNABenchmark.main(DNABenchmark.java:113)


Question 1: are the benchmark timings for StringStrand consistent with the 
explanation below that the time to execute cutAndSplice is O(b2S)? 

Note that the value of b is half the number of calls to append since each cut 
(except the first) is modeled by two calls of append in the method cutAndSplice
 -- see the code. This means that b2 will be constant in the benchmark, but S 
 will vary.
 
 
Yes the timings for StringStrand are consistent with the explanation that 
the time to execute cutAndSplice is O(b^2S). B (the number of occurrences of the enzyme)
is held constant in the Benchmark and we see that there is a linear relationship
between S(the length of the insertion) and the time it takes to execute. I took the
Splicee length and the time and plotted a graph to verify this math and there is a direct
positive linear relationship. Thus the explanation that cutAndSlice is O(b^2S) is consistent 
with the outputted times. However, this relationship only becomes apparent when the splicee 
becomes larger and larger (as in the case when we doubled from 262,144 to 524,288). 
When the splicee is smaller, this relationship is not as clear since the Java machine has 
a minimum amount of time needed to run. . 



 
 
 
 

 
 
 
 
 


 
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.048	1290
StringBuilderStrand:	            512	      4,965,591	0.028	1290
StringBuilderStrand:	          1,024	      5,295,831	0.011	1290
StringBuilderStrand:	          2,048	      5,956,311	0.012	1290
StringBuilderStrand:	          4,096	      7,277,271	0.017	1290
StringBuilderStrand:	          8,192	      9,919,191	0.012	1290
StringBuilderStrand:	         16,384	     15,203,031	0.015	1290
StringBuilderStrand:	         32,768	     25,770,711	0.034	1290
StringBuilderStrand:	         65,536	     46,906,071	0.078	1290
StringBuilderStrand:	        131,072	     89,176,791	0.119	1290
StringBuilderStrand:	        262,144	    173,718,231	0.316	1290
StringBuilderStrand:	        524,288	    342,801,111	0.859	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)



Question 2: are the benchmark timings for StringBuilderStrand consistent with 
the explanation below that the time to execute cutAndSplice is O(bS)? 

Note that the value of b is half the number of calls to append since each cut 
(except the first) is modeled by two calls of append in the method cutAndSplice 
-- see the code. This means that b will be constant in the benchmark, but S will vary. 


Since b is held constant we can look at how the output times vary as S changes. Looking 
through the data we see that as S doubles the time roughly doubles, so the explanation 
that the time to execute cutAndSplice is O(bS) makes sense. Again, there is a direct linear
relationship which means that the S term is not quadratic. This can also be confirmed by 
making a graph. We also see again that the relationship only becomes clearer when the 
splicee becomes larger and larger (as in the case when we doubled from 262,144 to 524,288). 
When the splicee is smaller, this relationship is not as clear. 








Question 3: Explain why the time for LinkStrand does not change much at all over all the 
runs in the benchmark program. Explain why you think memory is exhausted at the specific 
strand size you see in your timings -- as compared to exhaustion for String and StringBuilder.


The time for LinkStrand does not change much because it doesn't matter how long the splicee is
when using LinkStrand. This is because LinkStrand is not making copies of the splicee and adding it
to the String every time but rather it uses a pointer to the same splicee in storage (changing the 
pointer is an O(1) operation). Thus, it is simply manipulating the next fields of the Nodes to 
point to a different splicee, which it does several times as it passes through the Strand. 
This means that the complexity is derived solely from passing through the nodes of the LinkStrand

The code breaks down with a splicee length of 536,870,912 for LinkStrand. With StringStrand and StringBuilderStrand
the code breaks down with a length of 524,288. The memory is exhausted at this specific strand size because this is 
the maximum number of nodes that Java could store. For StringStrand and StringBuilderStrand, the issue was running 
out of memory room for the new Strings/objects that had to be stored in each run. In LinkStrand, we only store the 
splicee once and only redirect pointers rather than creating a new String or StringBuilder object each time. 




dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.044	1290
LinkStrand:	            512	      4,965,591	0.027	1290
LinkStrand:	          1,024	      5,295,831	0.006	1290
LinkStrand:	          2,048	      5,956,311	0.007	1290
LinkStrand:	          4,096	      7,277,271	0.015	1290
LinkStrand:	          8,192	      9,919,191	0.008	1290
LinkStrand:	         16,384	     15,203,031	0.009	1290
LinkStrand:	         32,768	     25,770,711	0.010	1290
LinkStrand:	         65,536	     46,906,071	0.006	1290
LinkStrand:	        131,072	     89,176,791	0.008	1290
LinkStrand:	        262,144	    173,718,231	0.007	1290
LinkStrand:	        524,288	    342,801,111	0.012	1290
LinkStrand:	      1,048,576	    680,966,871	0.016	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.010	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.019	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.018	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.011	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.015	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.008	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.011	1290
LinkStrand:	    268,435,456	173,145,504,471	0.016	1290
LinkStrand:	    536,870,912	346,286,373,591	0.018	1290